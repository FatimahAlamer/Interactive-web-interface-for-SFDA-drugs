library(rvest)
library(dplyr)
link = "https://go.drugbank.com/drugs?approved=1&c=name&d=up"
page = read_html(link)
drug_name = page %>% html_nodes(".drug-name a") %>% html_text()
drug_links= page %>% html_nodes(".drug-name a") %>%
html_attr("href") %>% paste("https://go.drugbank.com", ., sep="")
structure = page %>% html_nodes("#drugs-table img") %>% html_text()
description = page %>% html_nodes(".description-value ") %>% html_text()
categories = page %>% html_nodes(".categories-value ") %>% html_text()
# add indication
get_indication = function(drug_link) {
drug_page = read_html(drug_link)
drug_indication = drug_page %>% html_nodes("#indication+ .col-sm-8 p") %>%
html_text() %>% paste(collapse = ",")
return(drug_indication)
}
indication = sapply(drug_links, FUN = get_indication, USE.NAMES = FALSE)
#DF
drug_bank = data.frame(drug_name, structure, description, categories, indication, stringsAsFactors = FALSE)
drug_bank
View(drug_bank)
View(drug_bank)
# add mechanism-of-action
get_mechanism_of_action = function(drug_link) {
drug_page = read_html(drug_link)
drug_mechanism_of_action = drug_page %>% html_nodes("#mechanism-of-action+ .col-sm-8 p") %>%
html_text() %>% paste(collapse = ",")
return(drug_mechanism_of_action)
}
# add food_interaction
get_food_interaction = function(drug_link) {
drug_page = read_html(drug_link)
drug_food_interaction = drug_page %>% html_nodes("#food-interactions+ .col-sm-8 .not-available") %>%
html_text() %>% paste(collapse = ",")
return(drug_food_interaction)
}
#DF
drug_bank = data.frame(drug_name, structure, description, categories, indication, drug_mechanism_of_action, drug_food_interaction, stringsAsFactors = FALSE)
get_mechanism_of_action = function(drug_link) {
drug_page = read_html(drug_link)
drug_mechanism_of_action = drug_page %>% html_nodes("#mechanism-of-action+ .col-sm-8 p") %>%
html_text() %>% paste(collapse = ",")
return(drug_mechanism_of_action)
}
# add food_interaction
get_food_interaction = function(drug_link) {
drug_page = read_html(drug_link)
drug_food_interaction = drug_page %>% html_nodes("#food-interactions+ .col-sm-8 .not-available") %>%
html_text() %>% paste(collapse = ",")
return(drug_food_interaction)
}
#DF
drug_bank = data.frame(drug_name, structure, description, categories, indication, drug_mechanism_of_action, drug_food_interaction, stringsAsFactors = FALSE)
food_interaction = sapply(drug_links, FUN = get_food_interaction, USE.NAMES = FALSE)
mechanism_of_action = sapply(drug_links, FUN = get_mechanism_of_action, USE.NAMES = FALSE)
#DF
drug_bank = data.frame(drug_name, structure, description, categories, indication, mechanism_of_action, food_interaction, stringsAsFactors = FALSE)
#DF
drug_bank = data.frame(drug_name, categories, indication, mechanism_of_action, food_interaction, stringsAsFactors = FALSE)
View(drug_bank)
View(drug_bank)
View(drug_bank)
View(drug_bank)
library(rvest)
library(dplyr)
get_cast = function(movie_link) {
movie_page = read_html(movie_link)
movie_cast = movie_page %>% html_nodes(".primary_photo+ td a") %>%
html_text() %>% paste(collapse = ",")
return(movie_cast)
}
movies = data.frame()
for (page_result in seq(from = 1, to = 51, by = 50)) {
link = paste0("https://www.imdb.com/search/title/?title_type=feature&num_votes=25000,&genres=adventure&sort=user_rating,desc&start=",
page_result, "&ref_=adv_nxt")
page = read_html(link)
name = page %>% html_nodes(".lister-item-header a") %>% html_text()
movie_links = page %>% html_nodes(".lister-item-header a") %>%
html_attr("href") %>% paste("https://www.imdb.com", ., sep="")
year = page %>% html_nodes(".text-muted.unbold") %>% html_text()
rating = page %>% html_nodes(".ratings-imdb-rating strong") %>% html_text()
synopsis = page %>% html_nodes(".ratings-bar+ .text-muted") %>% html_text()
cast = sapply(movie_links, FUN = get_cast, USE.NAMES = FALSE)
movies = rbind(movies, data.frame(name, year, rating, synopsis, cast, stringsAsFactors = FALSE))
print(paste("Page:", page_result))
}
View(movies)
View(movies)
shiny::runApp('BMI_Calc')
# define the server              #
####################################
shinyApp(ui = ui, server = server)
# define the server              #
####################################
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
####################################
# User Interface                   #
####################################
ui <- fluidPage(theme = shinytheme("united"),
navbarPage("BMI Calculator:",
tabPanel("Home",
# Input values
sidebarPanel(
HTML("<h3>Input parameters</h3>"),
sliderInput("height",
label = "Height",
value = 175,
min = 40,
max = 250),
sliderInput("weight",
label = "Weight",
value = 70,
min = 20,
max = 100),
actionButton("submitbutton",
"Submit",
class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Results table
) # mainPanel()
), #tabPanel(), Home
tabPanel("About",
titlePanel("About"),
div(includeMarkdown("about.md"),
align="justify")
) #tabPanel(), About
) # navbarPage()
) # fluidPage()
####################################
# Server                           #
####################################
server <- function(input, output, session) {
# Input Data
datasetInput <- reactive({
bmi <- input$weight/( (input$height/100) * (input$height/100) )
bmi <- data.frame(bmi)
names(bmi) <- "BMI"
print(bmi)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
# define the server              #
####################################
shinyApp(ui = ui, server = server)
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('BMI')
runApp('C:/Users/fatim/OneDrive/Desktop/app (3).R')
runApp('C:/Users/fatim/Downloads/app (1).R')
about <- read.table("C:/Users/fatim/OneDrive/Desktop/about.md", quote="\"")
View(about)
runApp('C:/Users/fatim/OneDrive/Desktop/app (3).R')
setwd("~/Misk Capstone project")
